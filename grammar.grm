use crate::syntax::{Expr, Ident, Name};
use std::convert::TryFrom;

$whitespace: () = [
    /\s+/ => (),
    comment "" => (),
];

comment: () = [
    /\/\//" /.*$/ => (),
    /\/\*/" rest_of_multiline_comment => (),
];

rest_of_multiline_comment: () = [
    "/*" rest_of_multiline_comment rest_of_multiline_comment => (),
    "*/" => (),
    /./ rest_of_multiline_comment => (),
];


any_term: Expr = [
    let_statement,
    non_statement_term,
];

non_statement_term: Expr = [
    func_term,
    func_type,
    typed_term,
    app,
    in,
    enclosed_term,
];

enclosed_term: Expr = [
    bracketed_term,
    variable,
    string,
];

bracketed_term: Expr = [
    parens_term,
    pair_term,
    unit_term,
    enum_left,
    enum_right,
    case_term,
    nil_term,
    pair_type,
    unit_type,
    enum_type,
    never_type,
    case_type,
    nil_type,
];




parens_term: Expr = "(" (enclosed: any_term) ")" => enclosed;
typed_term: Expr = (term: enclosed_term) ":" (ty: enclosed_term) => Expr::Typed { term, ty };

unit_term: Expr = "{" "}" => Expr::Unit;
unit_type: Expr = "#{" "}" => Expr::UnitType;

pair_term: Expr = [
    "{" (ident: ident) "=" (head: non_statement_term) (tail: pair_term_tail) "}"
        => Expr::Pair { field: Some(ident), head, tail },
    "{" (head: non_statement_term) (tail: pair_term_tail) "}"
        => Expr::Pair { field: None, head, tail },
];

pair_term_tail: Expr = [
    "," ".." (tail: non_statement_term) => tail,
    "," (ident: ident) "=" (head: non_statement_term) (tail: pair_term_tail)
        => Expr::Pair { field: Some(ident), head, tail },
    "," (head: non_statement_term) (tail: pair_term_tail)
        => Expr::Pair { field: None, head, tail },
    "," => Expr::Unit,
    "" => Expr::Unit,
];

pair_type: Expr = [
    "#{" (ident: ident) ":" (head: non_statement_term) (tail: pair_type_tail) "}"
        => Expr::PairType { field: Some(ident), head, tail },
    "#{" (head: non_statement_term) (tail: pair_type_tail) "}"
        => Expr::PairType { field: None, head, tail },
];

pair_type_tail: Expr = [
    "," ".." (tail: non_statement_term) => tail,
    "," (ident: ident) ":" (head: non_statement_term) (tail: pair_type_tail)
        => Expr::PairType { field: Some(ident), head, tail },
    "," (head: non_statement_term) (tail: pair_type_tail)
        => Expr::PairType { field: None, head, tail },
    "," => Expr::UnitType,
    "" => Expr::UnitType,
];

enum_left: Expr = [
    "@" (name: name) "=" (left: non_statement_term)
        => Expr::InjLeft { name: Some(name), left },
    "@" (left: non_statement_term)
        => Expr::InjLeft { name: None, left },
];

enum_right: Expr = "@" ".." (right: non_statement_term) => Expr::InjRight { right };

enum_type: Expr = [
    "@[" (ident: ident) ":" (head: non_statement_term) (tail: enum_type_tail) "]"
        => Expr::EnumType { field: Some(ident), head, tail },
    "@[" (head: non_statement_term) (tail: enum_type_tail) "]"
        => Expr::EnumType { field: None, head, tail },
];

enum_type_tail: Expr = [
    "," ".." (tail: non_statement_term) => tail,
    "," (ident: ident) ":" (head: non_statement_term) (tail: enum_type_tail)
        => Expr::EnumType { field: Some(ident), head, tail },
    "," (head: non_statement_term) (tail: enum_type_tail)
        => Expr::EnumType { field: None, head, tail },
    "," => Expr::NeverType,
    "" => Expr::NeverType,
];

never_type: Expr = "@[" "]" => Expr::NeverType;

name: Name = [
    /\^/ (i: name) => {
        let i = i.into_inner();
        Name { ident: i.ident, bumps: i.bumps + 1 }
    },
    (ident: ident) => Name { ident: ident, bumps: 0 },
];

variable: Expr = (i: name) => Expr::Var(i.into_inner());
ident_str: String = /[a-zA-Z][a-zA-Z0-9]*\b/;
ident: Ident = "" (s: ident_str) => Ident(s.into_inner());

app: Expr = (func: enclosed_term) (arg: bracketed_term) => Expr::App { func, arg };
in: Expr = (arg: enclosed_term) "in" (func: enclosed_term) => Expr::App { func, arg };

func_term: Expr = (pat: enclosed_term) "=>" (body: non_statement_term) => Expr::Func { pat, body };
func_type: Expr = (pat: enclosed_term) "->" (body: non_statement_term) => Expr::FuncType { pat, body };

nil_term: Expr = "[" "]" => Expr::Nil;
nil_type: Expr = "#[" "]" => Expr::NilType;

case_term: Expr = [
    "[" (ident: ident) "=" (head: non_statement_term) (tail: case_term_tail) "]"
        => Expr::Case { field: Some(ident), head, tail },
    "[" (head: non_statement_term) (tail: case_term_tail) "}"
        => Expr::Case { field: None, head, tail },
];

case_term_tail: Expr = [
    "," ".." (tail: non_statement_term) => tail,
    "," (ident: ident) "=" (head: non_statement_term) (tail: case_term_tail)
        => Expr::Case { field: Some(ident), head, tail },
    "," (head: non_statement_term) (tail: case_term_tail)
        => Expr::Case { field: None, head, tail },
    "," => Expr::Nil,
    "" => Expr::Nil,
];

case_type: Expr = [
    "#[" (ident: ident) ":" (head: non_statement_term) (tail: case_type_tail) "]"
        => Expr::EnumType { field: Some(ident), head, tail },
    "#[" (head: non_statement_term) (tail: case_type_tail) "]"
        => Expr::EnumType { field: None, head, tail },
];

case_type_tail: Expr = [
    "," ".." (tail: non_statement_term) => tail,
    "," (ident: ident) ":" (head: non_statement_term) (tail: case_type_tail)
        => Expr::EnumType { field: Some(ident), head, tail },
    "," (head: non_statement_term) (tail: case_type_tail)
        => Expr::EnumType { field: None, head, tail },
    "," => Expr::NeverType,
    "" => Expr::NeverType,
];

let_statement: Expr
    = "let" (pat: non_statement_term) "=" (expr: non_statement_term) ";" (body: any_term)
    => Expr::Let { pat, expr, body };

string: Expr = "\"" (s: string_inner) "\"" => Expr::String(s.into_inner());
string_inner: String = [
    /"/ => String::new(),
    /\\/ (e: escape_code) (s: string_inner) => format!("{}{}", e.into_inner(), s.into_inner()),
    (s: /[^\\"]+/) => s,
];

escape_code: char = [
    /n/ => '\n',
    /r/ => '\r',
    /\\/ => '\\',
    /t/ => '\t',
    /0/ => '\0',
    /x/ (ds: /[0-9a-fA-F]{2}/) => {
        char::try_from(ds.into_inner().chars().fold(0, |i, c| (i << 4) | c.to_digit(16).unwrap())).unwrap()
    },
    /u\{/ (ds: /[0-9a-fA-F]{,6}/) /\}/ => {
        char::try_from(ds.into_inner().chars().fold(0, |i, c| (i << 4) | c.to_digit(16).unwrap())).unwrap()
    },
];

